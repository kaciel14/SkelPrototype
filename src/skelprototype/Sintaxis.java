
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jun 09 16:31:20 CDT 2024
//----------------------------------------------------

package skelprototype;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jun 09 16:31:20 CDT 2024
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\010\000\002\003" +
    "\011\000\002\003\012\000\002\003\013\000\002\003\014" +
    "\000\002\003\013\000\002\003\014\000\002\003\013\000" +
    "\002\003\014\000\002\016\003\000\002\016\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\005\003\000\002\005\005\000\002\006\004" +
    "\000\002\006\003\000\002\006\004\000\002\006\003\000" +
    "\002\006\004\000\002\006\003\000\002\007\005\000\002" +
    "\007\007\000\002\007\007\000\002\007\004\000\002\007" +
    "\005\000\002\007\007\000\002\007\004\000\002\007\005" +
    "\000\002\007\007\000\002\007\007\000\002\007\007\000" +
    "\002\007\004\000\002\007\005\000\002\007\007\000\002" +
    "\007\007\000\002\007\006\000\002\007\006\000\002\007" +
    "\006\000\002\007\006\000\002\007\007\000\002\007\003" +
    "\000\002\010\011\000\002\012\003\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\006\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\011\007\000\002\013\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\017\006\000\002\020\004\000\002\020" +
    "\004\000\002\020\004\000\002\020\004\000\002\020\004" +
    "\000\002\020\004\000\002\020\004\000\002\020\004\000" +
    "\002\020\004\000\002\020\004\000\002\020\004\000\002" +
    "\020\004\000\002\020\004\000\002\021\004\000\002\021" +
    "\004\000\002\021\004\000\002\021\004\000\002\021\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\004\006\004\001\002\000\004\010\311\001" +
    "\002\000\004\007\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\010\011\001\002\000" +
    "\004\017\012\001\002\000\006\045\016\046\015\001\002" +
    "\000\010\020\ufff7\045\016\046\015\001\002\000\004\020" +
    "\306\001\002\000\010\004\225\005\223\014\224\001\002" +
    "\000\004\010\017\001\002\000\004\015\020\001\002\000" +
    "\014\004\026\005\025\013\021\014\027\016\023\001\002" +
    "\000\004\010\222\001\002\000\004\016\216\001\002\000" +
    "\004\017\035\001\002\000\006\011\033\016\ufff1\001\002" +
    "\000\004\010\032\001\002\000\004\010\031\001\002\000" +
    "\004\010\030\001\002\000\006\011\ufff4\016\ufff4\001\002" +
    "\000\006\011\ufff5\016\ufff5\001\002\000\006\011\ufff3\016" +
    "\ufff3\001\002\000\012\004\026\005\025\013\021\014\027" +
    "\001\002\000\004\016\ufff0\001\002\000\016\004\047\005" +
    "\036\010\050\013\046\014\041\024\037\001\002\000\004" +
    "\010\205\001\002\000\004\015\156\001\002\000\022\004" +
    "\uffee\005\uffee\010\uffee\013\uffee\014\uffee\020\uffee\024\uffee" +
    "\047\uffee\001\002\000\004\010\147\001\002\000\022\004" +
    "\uffd5\005\uffd5\010\uffd5\013\uffd5\014\uffd5\020\uffd5\024\uffd5" +
    "\047\uffd5\001\002\000\022\004\uffea\005\uffea\010\uffea\013" +
    "\uffea\014\uffea\020\uffea\024\uffea\047\uffea\001\002\000\024" +
    "\004\uffec\005\uffec\010\uffec\013\uffec\014\uffec\020\uffec\024" +
    "\uffec\025\142\047\uffec\001\002\000\020\004\047\005\036" +
    "\010\050\013\046\014\041\020\141\024\037\001\002\000" +
    "\004\010\127\001\002\000\004\010\116\001\002\000\004" +
    "\030\051\001\002\000\014\010\056\012\054\026\053\027" +
    "\052\031\055\001\002\000\014\023\114\034\065\037\062" +
    "\040\060\043\064\001\002\000\014\023\112\034\065\037" +
    "\062\040\060\043\064\001\002\000\004\012\107\001\002" +
    "\000\014\023\106\034\065\037\062\040\060\043\064\001" +
    "\002\000\014\023\104\034\065\037\062\040\060\043\064" +
    "\001\002\000\014\023\063\034\065\037\062\040\060\043" +
    "\064\001\002\000\010\010\102\026\101\027\100\001\002" +
    "\000\014\023\uffae\034\uffae\037\uffae\040\uffae\043\uffae\001" +
    "\002\000\010\010\077\026\076\027\075\001\002\000\022" +
    "\004\uffc0\005\uffc0\010\uffc0\013\uffc0\014\uffc0\020\uffc0\024" +
    "\uffc0\047\uffc0\001\002\000\012\010\074\026\072\027\071" +
    "\031\073\001\002\000\010\010\070\026\066\027\067\001" +
    "\002\000\014\023\uffb9\034\uffb9\037\uffb9\040\uffb9\043\uffb9" +
    "\001\002\000\014\023\uffb5\034\uffb5\037\uffb5\040\uffb5\043" +
    "\uffb5\001\002\000\014\023\uffbd\034\uffbd\037\uffbd\040\uffbd" +
    "\043\uffbd\001\002\000\014\023\uffb7\034\uffb7\037\uffb7\040" +
    "\uffb7\043\uffb7\001\002\000\014\023\uffbb\034\uffbb\037\uffbb" +
    "\040\uffbb\043\uffbb\001\002\000\014\023\uffb3\034\uffb3\037" +
    "\uffb3\040\uffb3\043\uffb3\001\002\000\014\023\uffbf\034\uffbf" +
    "\037\uffbf\040\uffbf\043\uffbf\001\002\000\014\023\uffb6\034" +
    "\uffb6\037\uffb6\040\uffb6\043\uffb6\001\002\000\014\023\uffba" +
    "\034\uffba\037\uffba\040\uffba\043\uffba\001\002\000\014\023" +
    "\uffbe\034\uffbe\037\uffbe\040\uffbe\043\uffbe\001\002\000\014" +
    "\023\uffb4\034\uffb4\037\uffb4\040\uffb4\043\uffb4\001\002\000" +
    "\014\023\uffb8\034\uffb8\037\uffb8\040\uffb8\043\uffb8\001\002" +
    "\000\014\023\uffbc\034\uffbc\037\uffbc\040\uffbc\043\uffbc\001" +
    "\002\000\014\023\uffb2\034\uffb2\037\uffb2\040\uffb2\043\uffb2" +
    "\001\002\000\022\004\uffda\005\uffda\010\uffda\013\uffda\014" +
    "\uffda\020\uffda\024\uffda\047\uffda\001\002\000\014\023\uffb0" +
    "\034\uffb0\037\uffb0\040\uffb0\043\uffb0\001\002\000\022\004" +
    "\uffd7\005\uffd7\010\uffd7\013\uffd7\014\uffd7\020\uffd7\024\uffd7" +
    "\047\uffd7\001\002\000\004\023\110\001\002\000\022\004" +
    "\uffd6\005\uffd6\010\uffd6\013\uffd6\014\uffd6\020\uffd6\024\uffd6" +
    "\047\uffd6\001\002\000\014\023\uffb1\034\uffb1\037\uffb1\040" +
    "\uffb1\043\uffb1\001\002\000\022\004\uffd9\005\uffd9\010\uffd9" +
    "\013\uffd9\014\uffd9\020\uffd9\024\uffd9\047\uffd9\001\002\000" +
    "\014\023\uffaf\034\uffaf\037\uffaf\040\uffaf\043\uffaf\001\002" +
    "\000\022\004\uffd8\005\uffd8\010\uffd8\013\uffd8\014\uffd8\020" +
    "\uffd8\024\uffd8\047\uffd8\001\002\000\022\004\uffe6\005\uffe6" +
    "\010\uffe6\013\uffe6\014\uffe6\020\uffe6\024\uffe6\047\uffe6\001" +
    "\002\000\006\023\117\030\120\001\002\000\022\004\uffe9" +
    "\005\uffe9\010\uffe9\013\uffe9\014\uffe9\020\uffe9\024\uffe9\047" +
    "\uffe9\001\002\000\012\010\124\026\121\027\122\031\123" +
    "\001\002\000\014\023\126\034\065\037\062\040\060\043" +
    "\064\001\002\000\012\034\065\037\062\040\060\043\064" +
    "\001\002\000\012\034\065\037\062\040\060\043\064\001" +
    "\002\000\014\023\125\034\065\037\062\040\060\043\064" +
    "\001\002\000\022\004\uffe7\005\uffe7\010\uffe7\013\uffe7\014" +
    "\uffe7\020\uffe7\024\uffe7\047\uffe7\001\002\000\022\004\uffe8" +
    "\005\uffe8\010\uffe8\013\uffe8\014\uffe8\020\uffe8\024\uffe8\047" +
    "\uffe8\001\002\000\006\023\130\030\131\001\002\000\022" +
    "\004\uffdd\005\uffdd\010\uffdd\013\uffdd\014\uffdd\020\uffdd\024" +
    "\uffdd\047\uffdd\001\002\000\006\010\133\022\132\001\002" +
    "\000\004\023\135\001\002\000\004\023\134\001\002\000" +
    "\022\004\uffdb\005\uffdb\010\uffdb\013\uffdb\014\uffdb\020\uffdb" +
    "\024\uffdb\047\uffdb\001\002\000\022\004\uffdc\005\uffdc\010" +
    "\uffdc\013\uffdc\014\uffdc\020\uffdc\024\uffdc\047\uffdc\001\002" +
    "\000\022\004\uffef\005\uffef\010\uffef\013\uffef\014\uffef\020" +
    "\uffef\024\uffef\047\uffef\001\002\000\022\004\uffeb\005\uffeb" +
    "\010\uffeb\013\uffeb\014\uffeb\020\uffeb\024\uffeb\047\uffeb\001" +
    "\002\000\024\004\uffed\005\uffed\010\uffed\013\uffed\014\uffed" +
    "\020\uffed\024\uffed\025\142\047\uffed\001\002\000\010\020" +
    "\uffff\045\uffff\046\uffff\001\002\000\004\017\143\001\002" +
    "\000\016\004\047\005\036\010\050\013\046\014\041\024" +
    "\037\001\002\000\020\004\047\005\036\010\050\013\046" +
    "\014\041\020\145\024\037\001\002\000\022\004\uffc9\005" +
    "\uffc9\010\uffc9\013\uffc9\014\uffc9\020\uffc9\024\uffc9\047\uffc9" +
    "\001\002\000\022\004\uffe3\005\uffe3\010\uffe3\013\uffe3\014" +
    "\uffe3\020\uffe3\024\uffe3\047\uffe3\001\002\000\006\023\150" +
    "\030\151\001\002\000\022\004\uffe5\005\uffe5\010\uffe5\013" +
    "\uffe5\014\uffe5\020\uffe5\024\uffe5\047\uffe5\001\002\000\012" +
    "\010\154\026\152\027\122\031\153\001\002\000\012\034" +
    "\065\037\062\040\060\043\064\001\002\000\014\023\155" +
    "\034\065\037\062\040\060\043\064\001\002\000\012\034" +
    "\065\037\062\040\060\043\064\001\002\000\022\004\uffe4" +
    "\005\uffe4\010\uffe4\013\uffe4\014\uffe4\020\uffe4\024\uffe4\047" +
    "\uffe4\001\002\000\006\010\161\022\157\001\002\000\012" +
    "\016\uffd3\021\200\041\177\042\176\001\002\000\004\016" +
    "\172\001\002\000\004\021\162\001\002\000\016\010\170" +
    "\012\166\022\165\026\163\027\164\031\167\001\002\000" +
    "\004\016\uffd0\001\002\000\004\016\uffcf\001\002\000\004" +
    "\016\uffd1\001\002\000\004\012\171\001\002\000\004\016" +
    "\uffcc\001\002\000\004\016\uffce\001\002\000\004\016\uffcd" +
    "\001\002\000\004\017\173\001\002\000\016\004\047\005" +
    "\036\010\050\013\046\014\041\024\037\001\002\000\020" +
    "\004\047\005\036\010\050\013\046\014\041\020\175\024" +
    "\037\001\002\000\024\004\uffd4\005\uffd4\010\uffd4\013\uffd4" +
    "\014\uffd4\020\uffd4\024\uffd4\025\uffd4\047\uffd4\001\002\000" +
    "\004\022\203\001\002\000\004\022\202\001\002\000\004" +
    "\022\201\001\002\000\004\016\uffd2\001\002\000\004\016" +
    "\uffca\001\002\000\004\016\uffcb\001\002\000\022\004\uffde" +
    "\005\uffde\010\uffde\013\uffde\014\uffde\020\uffde\024\uffde\047" +
    "\uffde\001\002\000\006\023\206\030\207\001\002\000\022" +
    "\004\uffe2\005\uffe2\010\uffe2\013\uffe2\014\uffe2\020\uffe2\024" +
    "\uffe2\047\uffe2\001\002\000\012\010\212\026\211\027\210" +
    "\031\123\001\002\000\014\023\215\034\065\037\062\040" +
    "\060\043\064\001\002\000\014\023\214\034\065\037\062" +
    "\040\060\043\064\001\002\000\014\023\213\034\065\037" +
    "\062\040\060\043\064\001\002\000\022\004\uffdf\005\uffdf" +
    "\010\uffdf\013\uffdf\014\uffdf\020\uffdf\024\uffdf\047\uffdf\001" +
    "\002\000\022\004\uffe0\005\uffe0\010\uffe0\013\uffe0\014\uffe0" +
    "\020\uffe0\024\uffe0\047\uffe0\001\002\000\022\004\uffe1\005" +
    "\uffe1\010\uffe1\013\uffe1\014\uffe1\020\uffe1\024\uffe1\047\uffe1" +
    "\001\002\000\004\017\217\001\002\000\016\004\047\005" +
    "\036\010\050\013\046\014\041\024\037\001\002\000\020" +
    "\004\047\005\036\010\050\013\046\014\041\020\221\024" +
    "\037\001\002\000\010\020\ufffe\045\ufffe\046\ufffe\001\002" +
    "\000\006\011\ufff2\016\ufff2\001\002\000\004\010\271\001" +
    "\002\000\004\010\254\001\002\000\004\010\226\001\002" +
    "\000\004\015\227\001\002\000\014\004\026\005\025\013" +
    "\021\014\027\016\231\001\002\000\004\016\247\001\002" +
    "\000\004\017\232\001\002\000\016\004\047\005\036\010" +
    "\050\013\046\014\041\024\037\001\002\000\020\004\047" +
    "\005\036\010\050\013\046\014\041\024\037\047\234\001" +
    "\002\000\012\010\242\026\240\027\237\031\241\001\002" +
    "\000\004\020\236\001\002\000\010\020\ufffd\045\ufffd\046" +
    "\ufffd\001\002\000\004\023\246\001\002\000\004\023\245" +
    "\001\002\000\004\023\244\001\002\000\004\023\243\001" +
    "\002\000\004\020\uffc4\001\002\000\004\020\uffc2\001\002" +
    "\000\004\020\uffc3\001\002\000\004\020\uffc1\001\002\000" +
    "\004\017\250\001\002\000\016\004\047\005\036\010\050" +
    "\013\046\014\041\024\037\001\002\000\020\004\047\005" +
    "\036\010\050\013\046\014\041\024\037\047\234\001\002" +
    "\000\004\020\253\001\002\000\010\020\ufffc\045\ufffc\046" +
    "\ufffc\001\002\000\004\015\255\001\002\000\014\004\026" +
    "\005\025\013\021\014\027\016\257\001\002\000\004\016" +
    "\264\001\002\000\004\017\260\001\002\000\016\004\047" +
    "\005\036\010\050\013\046\014\041\024\037\001\002\000" +
    "\020\004\047\005\036\010\050\013\046\014\041\024\037" +
    "\047\234\001\002\000\004\020\263\001\002\000\010\020" +
    "\ufffb\045\ufffb\046\ufffb\001\002\000\004\017\265\001\002" +
    "\000\016\004\047\005\036\010\050\013\046\014\041\024" +
    "\037\001\002\000\020\004\047\005\036\010\050\013\046" +
    "\014\041\024\037\047\234\001\002\000\004\020\270\001" +
    "\002\000\010\020\ufffa\045\ufffa\046\ufffa\001\002\000\004" +
    "\015\272\001\002\000\014\004\026\005\025\013\021\014" +
    "\027\016\274\001\002\000\004\016\301\001\002\000\004" +
    "\017\275\001\002\000\016\004\047\005\036\010\050\013" +
    "\046\014\041\024\037\001\002\000\020\004\047\005\036" +
    "\010\050\013\046\014\041\024\037\047\234\001\002\000" +
    "\004\020\300\001\002\000\010\020\ufff9\045\ufff9\046\ufff9" +
    "\001\002\000\004\017\302\001\002\000\016\004\047\005" +
    "\036\010\050\013\046\014\041\024\037\001\002\000\020" +
    "\004\047\005\036\010\050\013\046\014\041\024\037\047" +
    "\234\001\002\000\004\020\305\001\002\000\010\020\ufff8" +
    "\045\ufff8\046\ufff8\001\002\000\004\002\000\001\002\000" +
    "\004\020\ufff6\001\002\000\004\023\316\001\002\000\004" +
    "\044\312\001\002\000\006\010\314\034\315\001\002\000" +
    "\004\023\uffc6\001\002\000\006\023\uffc7\044\312\001\002" +
    "\000\004\023\uffc5\001\002\000\004\007\uffc8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\006\002\005\013\004\001\001\000\004\014" +
    "\307\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\012\016\013\001\001\000\006\003\012\016\306\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\023\005\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\023\005\033\001\001\000\002\001\001\000\014" +
    "\006\044\007\037\010\043\011\042\017\041\001\001\000" +
    "\004\017\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\135\010\137\011\136" +
    "\017\041\001\001\000\002\001\001\000\004\017\114\001" +
    "\001\000\002\001\001\000\004\021\056\001\001\000\004" +
    "\020\112\001\001\000\004\020\110\001\001\000\002\001" +
    "\001\000\004\020\104\001\001\000\004\020\102\001\001" +
    "\000\004\020\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\056\001\001\000\004\020" +
    "\110\001\001\000\004\020\112\001\001\000\004\020\104" +
    "\001\001\000\004\020\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\143\007\037\010\043\011\042\017\041\001\001" +
    "\000\012\007\135\010\137\011\136\017\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\056\001\001\000\004\020\110\001" +
    "\001\000\004\020\104\001\001\000\004\020\102\001\001" +
    "\000\002\001\001\000\004\012\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\173\007\037\010" +
    "\043\011\042\017\041\001\001\000\012\007\135\010\137" +
    "\011\136\017\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\056\001\001" +
    "\000\004\020\112\001\001\000\004\020\110\001\001\000" +
    "\004\020\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\006\217\007" +
    "\037\010\043\011\042\017\041\001\001\000\012\007\135" +
    "\010\137\011\136\017\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\023\005\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\232" +
    "\007\037\010\043\011\042\017\041\001\001\000\014\007" +
    "\135\010\137\011\136\015\234\017\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\250\007\037" +
    "\010\043\011\042\017\041\001\001\000\014\007\135\010" +
    "\137\011\136\015\251\017\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\023\005" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\260\007\037\010\043\011\042\017\041\001\001\000" +
    "\014\007\135\010\137\011\136\015\261\017\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\265\007\037\010\043\011\042\017\041\001\001" +
    "\000\014\007\135\010\137\011\136\015\266\017\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\023\005\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\275\007\037\010\043\011\042" +
    "\017\041\001\001\000\014\007\135\010\137\011\136\015" +
    "\276\017\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\302\007\037\010\043\011" +
    "\042\017\041\001\001\000\014\007\135\010\137\011\136" +
    "\015\303\017\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Operando ::= Operando Operador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Operando",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Operando ::= NumeroDecimal Operador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Operando",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Operando ::= Texto Operador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Operando",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Operando ::= Numero Operador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Operando",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Operando ::= Identificador Operador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Operando",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Operador ::= Suma Texto 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Operador",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Operador ::= Division NumeroDecimal 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Operador",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Operador ::= Multiplicacion NumeroDecimal 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Operador",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Operador ::= Resta NumeroDecimal 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Operador",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Operador ::= Suma NumeroDecimal 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Operador",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Operador ::= Division Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Operador",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Operador ::= Multiplicacion Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Operador",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Operador ::= Resta Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Operador",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Operador ::= Suma Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Operador",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Operador ::= Division Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Operador",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Operador ::= Multiplicacion Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Operador",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Operador ::= Resta Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Operador",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Operador ::= Suma Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Operador",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERACIONES ::= Identificador Asigna Operando FinDeLinea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RETORNO ::= Retorno NumeroDecimal FinDeLinea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("RETORNO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RETORNO ::= Retorno Texto FinDeLinea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("RETORNO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RETORNO ::= Retorno Numero FinDeLinea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("RETORNO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RETORNO ::= Retorno Identificador FinDeLinea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("RETORNO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DIR_LIBRERIA ::= Identificador Punto Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DIR_LIBRERIA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DIR_LIBRERIA ::= Identificador Punto DIR_LIBRERIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DIR_LIBRERIA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DIR_LIBRERIA ::= Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DIR_LIBRERIA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LIBRERIA ::= Import DIR_LIBRERIA FinDeLinea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IF_ELSE ::= IF Else LlaveApertura SENTENCIA LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_BOOLEANA ::= TrueFalse OR TrueFalse 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_BOOLEANA ::= TrueFalse AND TrueFalse 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_BOOLEANA ::= Identificador Relacional Texto 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_BOOLEANA ::= Identificador Relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_BOOLEANA ::= Identificador Relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_BOOLEANA ::= Identificador Relacional NumeroDecimal 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_BOOLEANA ::= Identificador Relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_BOOLEANA ::= Identificador Relacional TrueFalse 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_BOOLEANA ::= TrueFalse Relacional TrueFalse 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA ::= TrueFalse 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF ::= If ParentesisApertura SENTENCIA_BOOLEANA ParentesisCierre LlaveApertura SENTENCIA LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Identificador Asigna Comillas Comillas FinDeLinea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Identificador Asigna Texto FinDeLinea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Identificador Asigna NumeroDecimal FinDeLinea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Identificador Asigna Numero FinDeLinea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Identificador Asigna Identificador FinDeLinea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Booleano Identificador Asigna Identificador FinDeLinea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Booleano Identificador Asigna TrueFalse FinDeLinea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Booleano Identificador FinDeLinea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Decimal OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Decimal Identificador Asigna Identificador FinDeLinea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Decimal Identificador Asigna Numero FinDeLinea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Decimal Identificador Asigna NumeroDecimal FinDeLinea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Decimal Identificador FinDeLinea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Cadena OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Cadena Identificador Asigna Texto FinDeLinea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Cadena Identificador FinDeLinea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Entero OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Entero Identificador Asigna Identificador FinDeLinea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Entero Identificador Asigna Numero FinDeLinea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Entero Identificador FinDeLinea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // METODO_PARAM ::= PARAM Coma METODO_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("METODO_PARAM",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // METODO_PARAM ::= PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("METODO_PARAM",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAM ::= Booleano Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PARAM",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAM ::= Decimal Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PARAM",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARAM ::= Cadena Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PARAM",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAM ::= Entero Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PARAM",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GRUPO_METODOS ::= METODO GRUPO_METODOS 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("GRUPO_METODOS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GRUPO_METODOS ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("GRUPO_METODOS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // METODO ::= MetodoRetorno Decimal Identificador ParentesisApertura METODO_PARAM ParentesisCierre LlaveApertura SENTENCIA RETORNO LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("METODO",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // METODO ::= MetodoRetorno Decimal Identificador ParentesisApertura ParentesisCierre LlaveApertura SENTENCIA RETORNO LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("METODO",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // METODO ::= MetodoRetorno Cadena Identificador ParentesisApertura METODO_PARAM ParentesisCierre LlaveApertura SENTENCIA RETORNO LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("METODO",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // METODO ::= MetodoRetorno Cadena Identificador ParentesisApertura ParentesisCierre LlaveApertura SENTENCIA RETORNO LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("METODO",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // METODO ::= MetodoRetorno Entero Identificador ParentesisApertura METODO_PARAM ParentesisCierre LlaveApertura SENTENCIA RETORNO LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("METODO",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // METODO ::= MetodoRetorno Entero Identificador ParentesisApertura ParentesisCierre LlaveApertura SENTENCIA RETORNO LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("METODO",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // METODO ::= MetodoVacio Identificador ParentesisApertura METODO_PARAM ParentesisCierre LlaveApertura SENTENCIA LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("METODO",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // METODO ::= MetodoVacio Identificador ParentesisApertura ParentesisCierre LlaveApertura SENTENCIA LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("METODO",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LIBRERIA Clase Identificador LlaveApertura GRUPO_METODOS LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

